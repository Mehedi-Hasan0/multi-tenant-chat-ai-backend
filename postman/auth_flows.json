{
  "info": {
    "name": "Ecom AI Agent - Auth (Complete)",
    "_postman_id": "auth-complete-001",
    "description": "Auth flows: tenant/admin login, refresh, logout, introspect, jwks, service accounts, widget init. Includes tests to set env tokens.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "01 - Tenant Login",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": { "mode": "raw", "raw": "{ \"email\": \"{{tenant_email}}\", \"password\": \"{{tenant_password}}\" }" },
        "url": { "raw": "{{base_url}}/v1/auth/login", "host": ["{{base_url}}"], "path": ["v1","auth","login"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status is 200', function(){ pm.response.to.have.status(200); });",
              "var b = pm.response.json();",
              "pm.expect(b).to.have.property('access_token');",
              "pm.environment.set('access_token', b.access_token);",
              "if(b.refresh_token) pm.environment.set('refresh_token', b.refresh_token);",
              "var exp = new Date(Date.now() + ((b.expires_in || 900) * 1000));",
              "pm.environment.set('access_token_expires_at', exp.toISOString());"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "02 - Admin Login",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": { "mode": "raw", "raw": "{ \"email\": \"{{admin_email}}\", \"password\": \"{{admin_password}}\" }" },
        "url": { "raw": "{{base_url}}/v1/admin/auth/login", "host": ["{{base_url}}"], "path": ["v1","admin","auth","login"] }
      },
      "event": [
        { "listen": "test", "script": { "exec": ["pm.test('admin login 200', function(){ pm.response.to.have.status(200); });","var b=pm.response.json(); if(b.access_token) pm.environment.set('admin_token', b.access_token);"], "type": "text/javascript" } }
      ]
    },
    {
      "name": "03 - Refresh Token",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": { "mode": "raw", "raw": "{ \"refresh_token\": \"{{refresh_token}}\" }" },
        "url": { "raw": "{{base_url}}/v1/auth/refresh", "host": ["{{base_url}}"], "path": ["v1","auth","refresh"] }
      },
      "event": [{ "listen": "test", "script": { "exec": ["pm.test('refresh 200', function(){ pm.response.to.have.status(200); });","var b=pm.response.json(); if(b.access_token) pm.environment.set('access_token', b.access_token); if(b.refresh_token) pm.environment.set('refresh_token', b.refresh_token); var exp = new Date(Date.now() + ((b.expires_in || 900) * 1000)); pm.environment.set('access_token_expires_at', exp.toISOString());"], "type": "text/javascript" } }]
    },
    {
      "name": "04 - Logout / Revoke",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{access_token}}" }],
        "body": { "mode": "raw", "raw": "{ \"refresh_token\": \"{{refresh_token}}\" }" },
        "url": { "raw": "{{base_url}}/v1/auth/logout", "host": ["{{base_url}}"], "path": ["v1","auth","logout"] }
      },
      "event": [{ "listen": "test", "script": { "exec": ["pm.test('logout 200', function(){ pm.response.to.have.status(200); }); pm.environment.unset('access_token'); pm.environment.unset('refresh_token'); pm.environment.unset('access_token_expires_at');"], "type": "text/javascript" } }]
    },
    {
      "name": "05 - Introspect",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{access_token}}" }],
        "body": { "mode": "raw", "raw": "{ \"token\": \"{{access_token}}\" }" },
        "url": { "raw": "{{base_url}}/v1/auth/introspect", "host": ["{{base_url}}"], "path": ["v1","auth","introspect"] }
      },
      "event": [{ "listen": "test", "script": { "exec": ["pm.test('introspect 200', function(){ pm.response.to.have.status(200); }); var b = pm.response.json(); pm.test('active boolean present', function(){ pm.expect(b).to.have.property('active'); });"], "type": "text/javascript" } }]
    },
    {
      "name": "06 - JWKS (public keys)",
      "request": { "method": "GET", "header": [], "url": { "raw": "{{base_url}}/.well-known/jwks.json", "host": ["{{base_url}}"], "path": [".well-known","jwks.json"] } },
      "event": [{ "listen": "test", "script": { "exec": ["pm.test('jwks 200', function(){ pm.response.to.have.status(200); }); var b=pm.response.json(); pm.test('keys array', function(){ pm.expect(b.keys).to.be.an('array'); });"], "type": "text/javascript" } }]
    },
    {
      "name": "07 - Create Service Account (admin)",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{admin_token}}" }],
        "body": { "mode": "raw", "raw": "{ \"name\": \"worker-1\", \"roles\": [\"service\"] }" },
        "url": { "raw": "{{base_url}}/v1/admin/service-accounts", "host": ["{{base_url}}"], "path": ["v1","admin","service-accounts"] }
      },
      "event": [{ "listen": "test", "script": { "exec": ["pm.test('create svc acct 201', function(){ pm.expect([200,201]).to.include(pm.response.code); }); var b=pm.response.json(); if(b && b.id) pm.environment.set('service_account_id', b.id);"], "type": "text/javascript" } }]
    },
    {
      "name": "08 - Mint Service Token",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{admin_token}}" }],
        "body": { "mode": "raw", "raw": "{ \"ttl_seconds\": 3600 }" },
        "url": { "raw": "{{base_url}}/v1/admin/service-accounts/{{service_account_id}}/token", "host": ["{{base_url}}"], "path": ["v1","admin","service-accounts","{{service_account_id}}","token"] }
      },
      "event": [{ "listen": "test", "script": { "exec": ["pm.test('mint token 200', function(){ pm.response.to.have.status(200); }); var b=pm.response.json(); if(b && b.token) pm.environment.set('service_account_token', b.token);"], "type": "text/javascript" } }]
    },
    {
      "name": "09 - Widget Init (ephemeral token)",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": { "mode": "raw", "raw": "{ \"tenant_id\": \"{{tenant_id}}\", \"domain\": \"{{widget_domain}}\" }" },
        "url": { "raw": "{{base_url}}/v1/public/widgets/init", "host": ["{{base_url}}"], "path": ["v1","public","widgets","init"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('widget init 200', function(){ pm.response.to.have.status(200); });",
              "var b = pm.response.json();",
              "if(b.widget_token) pm.environment.set('widget_token', b.widget_token);",
              "if(b.session_id) pm.environment.set('widget_session_id', b.session_id);"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "variable": [
    { "key": "base_url", "value": "http://localhost:3000" },
    { "key": "tenant_email", "value": "user@example.com" },
    { "key": "tenant_password", "value": "changeme" },
    { "key": "admin_email", "value": "admin@example.com" },
    { "key": "admin_password", "value": "adminpass" },
    { "key": "access_token", "value": "" },
    { "key": "refresh_token", "value": "" },
    { "key": "admin_token", "value": "" },
    { "key": "service_account_id", "value": "" },
    { "key": "service_account_token", "value": "" },
    { "key": "widget_token", "value": "" },
    { "key": "widget_session_id", "value": "" },
    { "key": "tenant_id", "value": "t_local" },
    { "key": "widget_domain", "value": "merchant.example.com" }
  ]
}
